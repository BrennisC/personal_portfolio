---
import { contactMethods } from "../lib/redesSociales";
import { benefits } from "../lib/benefits";
---

<section id="contact" class="py-20 relative">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-white mb-4">
        ¡Trabajemos <span class="text-gradient-blue">juntos</span>!
      </h2>
      <p class="text-xl text-slate-400 max-w-3xl mx-auto">
        ¿Tienes un proyecto en mente? Me encantaría escuchar tus ideas y
        ayudarte a hacerlas realidad.
      </p>
    </div>

    <div class="grid lg:grid-cols-2 gap-12">
      <!-- Contact Information -->
      <div class="space-y-8">
        <div class="glass p-8 rounded-2xl">
          <h3 class="text-2xl font-bold text-white mb-6">¿Por qué elegirme?</h3>
          <div class="space-y-6">
            {
              benefits.map((benefit) => (
                <div class="flex items-start space-x-4">
                  <div
                    class={`w-12 h-12 rounded-lg ${benefit.bgColorClass} flex items-center justify-center flex-shrink-0`}
                  >
                    <Fragment
                      set:html={benefit.icon.replace(
                        `class="w-6 h-6"`,
                        `class="w-6 h-6 ${benefit.iconColorClass}"`
                      )}
                    />
                  </div>
                  <div>
                    <h4 class="text-white font-semibold mb-2">
                      {benefit.title}
                    </h4>
                    <p class="text-slate-400">{benefit.description}</p>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
        <!-- Contact Methods -->
        <div class="space-y-4">
          <h3 class="text-xl font-bold text-white mb-4">Formas de contacto</h3>

          {
            contactMethods.map((method) =>
              method.url ? (
                <a
                  href={method.url}
                  target={method.url.startsWith("mailto:") ? "_self" : "_blank"}
                  rel="noopener noreferrer"
                  class="flex items-center p-4 glass rounded-xl hover:bg-white/10 transition-all duration-300 group"
                >
                  <div
                    class={`w-12 h-12 rounded-lg ${method.bgColorClass} flex items-center justify-center mr-4 group-hover:${method.bgColorClass.replace("/20", "/30")} transition-colors duration-300`}
                  >
                    <Fragment
                      set:html={method.icon.replace(
                        `class="w-6 h-6"`,
                        `class="w-6 h-6 ${method.iconColorClass}"`
                      )}
                    />
                  </div>
                  <div>
                    <h4 class="text-white font-semibold">{method.name}</h4>
                    <p class="text-slate-400">{method.value}</p>
                  </div>
                </a>
              ) : (
                <div class="flex items-center p-4 glass rounded-xl">
                  <div
                    class={`w-12 h-12 rounded-lg ${method.bgColorClass} flex items-center justify-center mr-4`}
                  >
                    <Fragment
                      set:html={method.icon.replace(
                        `class="w-6 h-6"`,
                        `class="w-6 h-6 ${method.iconColorClass}"`
                      )}
                    />
                  </div>
                  <div>
                    <h4 class="text-white font-semibold">{method.name}</h4>
                    <p class="text-slate-400">{method.value}</p>
                  </div>
                </div>
              )
            )
          }
        </div>
      </div>

      <!-- Contact Form -->
      <div class="glass p-8 rounded-2xl">
        <h3 class="text-2xl font-bold text-white mb-6">Envíame un mensaje</h3>
        <form id="contact-form" class="space-y-6">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label
                for="name"
                class="block text-sm font-medium text-slate-300 mb-2"
                >Nombre</label
              >
              <input
                type="text"
                id="name"
                name="name"
                required
                class="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-slate-400 transition-all duration-200"
                placeholder="Tu nombre completo"
              />
            </div>
            <div>
              <label
                for="email"
                class="block text-sm font-medium text-slate-300 mb-2"
                >Email</label
              >
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-slate-400 transition-all duration-200"
                placeholder="tu@email.com"
              />
            </div>
          </div>
          <div>
            <label
              for="message"
              class="block text-sm font-medium text-slate-300 mb-2"
              >Mensaje</label
            >
            <textarea
              id="message"
              name="message"
              rows="6"
              required
              class="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-slate-400 transition-all duration-200 resize-none"
            ></textarea>
          </div>

          <div class="flex items-start space-x-3">
            <input
              type="checkbox"
              id="privacy"
              name="privacy"
              required
              class="mt-1 w-4 h-4 text-blue-600 bg-slate-800 border-slate-600 rounded focus:ring-blue-500"
            />
            <label for="privacy" class="text-sm text-slate-400">
              Acepto el tratamiento de mis datos personales según la
              <a href="#" class="text-blue-400 hover:text-blue-300 underline"
                >política de privacidad</a
              >.
            </label>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-blue-600 to-violet-600 hover:from-blue-700 hover:to-violet-700 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-2xl flex items-center justify-center space-x-2"
          >
            <span>Enviar mensaje</span>
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </button>
        </form>

        <!-- Success Message -->
        <div
          id="success-message"
          class="hidden mt-6 p-4 bg-green-600/20 border border-green-600/30 rounded-lg"
        >
          <div class="flex items-center">
            <svg
              class="w-5 h-5 text-green-400 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="text-green-400 font-medium"
              >¡Mensaje enviado exitosamente! Te responderé pronto.</span
            >
          </div>
        </div>

        <!-- Error Message -->
        <div
          id="error-message"
          class="hidden mt-6 p-4 bg-red-600/20 border border-red-600/30 rounded-lg"
        >
          <div class="flex items-center">
            <svg
              class="w-5 h-5 text-red-400 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="text-red-400 font-medium"
              >Hubo un error al enviar el mensaje. Por favor intenta de nuevo.</span
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Form handling with proper TypeScript types
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const successMessage = document.getElementById("success-message");
  const errorMessage = document.getElementById("error-message");

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Hide previous messages
    successMessage?.classList.add("hidden");
    errorMessage?.classList.add("hidden");

    // Get form data
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    // Simulate form submission (replace with actual form handling)
    try {
      // Add loading state to submit button
      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      const originalText = submitButton?.innerHTML;

      if (submitButton) {
        submitButton.innerHTML = `
          <svg class="animate-spin w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Enviando...
        `;
        submitButton.disabled = true;
      }

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Show success message
      successMessage?.classList.remove("hidden");
      form.reset();

      // Reset submit button
      if (submitButton && originalText) {
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
      }
    } catch (error) {
      // Show error message
      errorMessage?.classList.remove("hidden");

      // Reset submit button
      const submitButton = form.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;
      if (submitButton) {
        submitButton.innerHTML = `
          <span>Enviar mensaje</span>
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
          </svg>
        `;
        submitButton.disabled = false;
      }
    }
  });

  // Form validation enhancement
  const inputs = form?.querySelectorAll("input, textarea, select");
  inputs?.forEach((input) => {
    input.addEventListener("blur", () => {
      // Type assertion to access value property
      const inputElement = input as
        | HTMLInputElement
        | HTMLTextAreaElement
        | HTMLSelectElement;

      if (inputElement.hasAttribute("required") && !inputElement.value.trim()) {
        inputElement.classList.add("border-red-500");
        inputElement.classList.remove("border-slate-600");
      } else {
        inputElement.classList.remove("border-red-500");
        inputElement.classList.add("border-slate-600");
      }
    });

    input.addEventListener("input", () => {
      // Type assertion to access value property
      const inputElement = input as
        | HTMLInputElement
        | HTMLTextAreaElement
        | HTMLSelectElement;

      if (
        inputElement.classList.contains("border-red-500") &&
        inputElement.value.trim()
      ) {
        inputElement.classList.remove("border-red-500");
        inputElement.classList.add("border-slate-600");
      }
    });
  });
</script>
